{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Spring School on Computational Chemistry Basic QC hands-on","text":"<p>This repository contains hands-on tutorials to be done using the TmoleX graphical user interface and the TURBOMOLE engine running on a Puhti. Note, that the latter requires a license, which is available for academic users on CSC supercomputers</p>"},{"location":"#preparations","title":"Preparations","text":"<ul> <li>Setting up TmoleX either via a Browser or by installing it on your own laptop </li> </ul>"},{"location":"#tutorial-1","title":"Tutorial 1","text":"<ul> <li>Use TmoleX to prepare a geometry optimization of a small molecule at DFT level</li> <li>Submit the job via TmoleX to Puhti, where the actual calculation is done</li> <li>Use TmoleX to monitor the progress of the job</li> <li>Use TmoleX to retreive and analyze the results </li> </ul>"},{"location":"#tutorial-2","title":"Tutorial 2","text":"<ul> <li>Multiple geometry optimizations of a number of isomers</li> <li>Switch to a higher quality basis set for a single point energy calculation</li> <li>Benchmark resource usage by looking at how long the jobs take vs used resources</li> <li>Construct your own job template and apply it to a set of molecules</li> </ul>"},{"location":"preparations/","title":"Setup TmoleX","text":"<p>TmoleX is an easy to use graphical user interface to handle TURBOMOLE calculations. TmoleX includes a structure builder and tools for preparing TURBOMOLE jobs and analyzing results. TmoleX can also be used to submit and supervise TURBOMOLE jobs on CSC's supercomputers.</p> <p>The free TmoleX Client version can be used from your local Windows, Linux, or MacOS desktop to run TURBOMOLE at CSC. It can be freely downloaded (requires registration) from the Dassault Syst\u00e8mes website. This is a demo version that also includes a restricted version of TURBOMOLE.</p>"},{"location":"preparations/#usage","title":"Usage","text":""},{"location":"preparations/#use-via-your-browser","title":"Use via your browser","text":"<p>Go to puhti.csc.fi using a web browser and login using your CSC/Haka user account. ![Slurm settings] 1. From there launch a Desktop.      * Activate the <code>Reservation-&gt; sscc_thu_small</code> that gives access to resourses specially dedicated for this course     * Select the project <code>project_2006657(CompChem Training)</code> that is used for this course     * Go with the default resourses    * Once resourses have been allocated <code>Launch Desktop</code> 2. Open a <code>Terminal</code> and load the TURBOMOLE module <code>module load turbomole/7.8</code>. 3. Start TmoleX with the command <code>TmoleX24</code>. 4. Select <code>New Project</code> and define a suitable project in the <code>File Name</code> slot    (e.g. <code>/scratch/project_2006657/&lt;your-username&gt;/qc_tutorial1</code>). 5. Define your system and type of calculation.  6. Small jobs can be run interactively: Start Job -&gt; Run (local) 7. Larger jobs should be run as batch jobs: Start Job -&gt; Run (network).</p> <p>Example settings are given below.  Remember to save the settings using <code>Save Machine</code>.</p>"},{"location":"preparations/#install-your-own-tmolex","title":"Install your own TmoleX","text":"<p>Install the TmoleX client on your local workstation. For details, see the registration and download page at Dassault Syst\u00e8mes website. With your version of TmoleX you can build your actual job locally and then submit the job to Puhti. With the client you can monitor how the job proceeds. When the job has completed you can retrieve the output and use your local client to analyze the results.</p> <p>Below are some example queue settings that can be used in TmoleX:</p> <p></p> <p>Where the complete script to be inserted in the field \"Script before job execution\" contains something like (modify according to your actual needs):</p> <pre><code>#SBATCH --reservation=sscc_thu_small                  # resource reservation for school\n#SBATCH --partition=small                             # queue\n#SBATCH --nodes=1                                     # for SMP only 1 is possible\n#SBATCH --cpus-per-task=4                             # SMP threads\n#SBATCH --account=project_2006657                     # insert here the project to be billed     \n#SBATCH --time=00:30:00                               # time as `hh:mm:ss`\nsource /appl/profile/zz-csc-env.sh\nulimit -s unlimited\nexport PARA_ARCH=SMP                                  # use SMP threads\nmodule load turbomole/7.8   \nexport PARNODES=$SLURM_CPUS_PER_TASK                  # for SMP\nexport PATH=$TURBODIR/bin/`$TURBODIR/scripts/sysname`:$PATH\n</code></pre> <p>Remember to save the settings using <code>Save Machine</code>. </p>"},{"location":"tutorial1/","title":"Tutorial 1: Basic DFT calculations using TmoleX and TURBOMOLE","text":"<ul> <li>Spring School on Computational Chemistry 17-19 April 2024</li> <li>Nino Runeberg, CSC - IT center for Science Ltd, based on the earlier work of Atte Sillanp\u00e4\u00e4</li> </ul>"},{"location":"tutorial1/#overview","title":"Overview","text":"<ol> <li>TmoleX is a graphical user interface to set up, launch and run jobs with TURBOMOLE</li> <li>This tutorial is made for use with TmoleX 24 and TUBOMOLE 7.8</li> <li>We'll use TmoleX to set up a formaldehyde geometry optimization</li> <li>Configure and submit the job to be run on puhti.csc.fi supercomputer</li> <li>Perform a subsequent frequency calculation on the optimized structure</li> <li>Visualize results</li> </ol>"},{"location":"tutorial1/#remote-usage-setup-at-csc","title":"Remote usage setup at CSC","text":"<ul> <li>TmoleX can be used either via a browser or by running it on your local    computer (see Preparations )   </li> <li>The model system and input parameters for the TUBOMOLE job are specified  using TmoleX</li> <li>A connection to supercomputer puhti.csc.fi is set up in TmoleX using ssh. (The password is cleared upon closing the software)</li> <li>Installation directory and supercomputer specific options are set in TmoleX so that the GUI can   launch the job for the queueing system (SLURM) on the Puhti</li> <li>TmoleX can follow the progress and once the job has completed, dowload the results to the local computer</li> <li>The CSC TmoleX page has more information.</li> <li>The overall CSC supercomputer environment can be found in the Docs CSC user guide   or in the CSC Computing environment self learning course materials.</li> <li>Aniother option is to use <code>ssh</code> and login directly on the Puhti login node, and prepare the job with <code>define</code>. </li> </ul>"},{"location":"tutorial1/#task-1-optimize-the-ground-state-for-formaldehyde","title":"Task 1: Optimize the ground state for formaldehyde","text":"<p>We need an initial guess for the geometry specifying the 3N-6 internal nuclear coordinates. This initial structure place the system on the energy surface that is uniquely defined by the computational model we are going to use (B-O approx.).  The performance of the model often vary at different parts of the surface.</p> <p></p>"},{"location":"tutorial1/#task-1-launch-tmolex-and-create-a-new-project","title":"Task 1: Launch TmoleX and create a new project","text":""},{"location":"tutorial1/#use-via-your-browser","title":"Use via your browser","text":"<p>Go to puhti.csc.fi using a web browser and login using your CSC/Haka user account.</p> <ol> <li>From there launch a Desktop. </li> <li>Open a <code>Terminal</code> and load the TURBOMOLE module <code>module load turbomole/7.8</code>.</li> <li>Start TmoleX with the command <code>TmoleX24</code>. </li> <li>Select <code>New Project</code> and define a suitable project in the <code>File Name</code> slot    (e.g. <code>/scratch/project_2006657/&lt;your-username&gt;/qc_tutorial1</code>). </li> <li>Define your system and type of calculation. </li> <li>Small jobs can be run interactively: Start Job -&gt; Run (local)</li> <li>Larger jobs should be run as batch jobs: Start Job -&gt; Run (network). Example    settings are given below. Note that passwordless connection doesn't work via    the browser. Remember to save the settings using <code>Save Machine</code>.</li> </ol>"},{"location":"tutorial1/#use-locally-installed-tmolex","title":"Use locally installed TmoleX","text":"<ul> <li>If you have installed TmoleX on your own laptop, launch it from icon/menu</li> <li>On the CSC workstations TmoleX is already installed, launch it from icon/menu</li> <li>Note. TmoleX warns about not finding a license. This is ok. We'll use the TURBOMOLE license on Puhti for the calculations. Accept the dialog.</li> <li>Define a suitable project directory (e.g. <code>~/qc_tutorial1</code>).</li> </ul>"},{"location":"tutorial1/#task-1-define-your-first-turbomole-job","title":"Task 1: Define your first turbomole job","text":"<p>A complete Turbomole job comprises the sequence:</p> <ul> <li>Geometry - Atomic Attributes - Molecular Attributes - Method - Start Job - Results</li> </ul> <p>The TURBOMOLE philosophy or program structure is based on running different \"modules\" one after another. The following diagram taken from a TURBOMOLE tutorial highlights the most typical ones and their relation.</p> <p></p>"},{"location":"tutorial1/#task-1-geometry-build-formaldehyde","title":"Task 1: Geometry -- Build formaldehyde","text":"<p>Open the 3D builder, right-click on canvas and load formaldehyde from the library </p> <p>Close the builder and continue to Atomic Attributes</p>"},{"location":"tutorial1/#task-1-atomic-attributes-select-basis-set","title":"Task 1: Atomic Attributes: Select basis set","text":"<p>Select the default def-SV(P) basis set</p> <p> </p> <p>Continue to Molecular Attributes</p>"},{"location":"tutorial1/#task-1-molecular-attributes-generate-initial-guess-mos","title":"Task 1: Molecular Attributes -- Generate initial guess MOs","text":"<p>Generate initial MOs by doing an extended H\u00fcckel calculation</p> <p></p> <p>Continue to Method</p>"},{"location":"tutorial1/#task-1-method-define-your-method","title":"Task 1: Method -- Define your method","text":"<p>Select the default method (ri-dft BP86/m3)</p> <p></p> <p>Continue to Start Job</p>"},{"location":"tutorial1/#task-1-start-job-define-your-job-type","title":"Task 1: Start Job -- Define your job type","text":"<p>We want to do a geometry optimization of the ground state.</p> <p></p> <p>Continue to run (network)</p>"},{"location":"tutorial1/#task-1-runnetwork-setup-remote-job","title":"Task 1: Run(network) -- Setup remote job","text":"<p>Click Save as the first dialog prompts for the folder to use for the job files.  In the new dialog, we define the remote (supercomputer) configuration:    * Which user account and project to use    * Where TURBOMOLE is installed    * etc.    * Note, this will differ for every user and machine    * General instructions for Puhti docs.csc.fi/apps/tmolex/    * important Replace <code>your-username</code> with your actual username on CSC supercomputer! Also in the Work directory  field.</p> <p>TURBOMOLE can be run in parallel either via a shared memory approach (SMP, only within a single node) or  by using MPI parallelization (possible to run a job over several nodes). In this tutorial we will use the SMP version.</p> <p></p> <p>Use these:</p> <ul> <li>Machine/IP: <code>puhti.csc.fi</code></li> <li>User: <code>&lt;your-username&gt;</code></li> <li>Work directory: <code>/scratch/project_2006657/&lt;your-username&gt;</code></li> <li>TURBOMOLE directory: <code>/appl/soft/chem/turbomole/7.8/TURBOMOLE</code></li> <li>Use queuing system (tick)</li> <li>Submit with: <code>sbatch</code></li> <li>Check status: <code>squeue -u $USER</code></li> </ul> <p>Script before job execution:</p> <pre><code>#SBATCH --reservation=sscc_thu_small                  # resource reservation for school\n#SBATCH --partition=small                             # queue\n#SBATCH --nodes=1                                     # for SMP only 1 is possible\n#SBATCH --cpus-per-task=4                             # SMP threads\n#SBATCH --account=project_2006657                     # insert here the project to be billed     \n#SBATCH --time=00:30:00                               # time as `hh:mm:ss`\nsource /appl/profile/zz-csc-env.sh\nulimit -s unlimited\nexport PARA_ARCH=SMP                                  # use SMP threads\nmodule load turbomole/7.8   \nexport PARNODES=$SLURM_CPUS_PER_TASK                  # for SMP\nexport PATH=$TURBODIR/bin/`$TURBODIR/scripts/sysname`:$PATH\n</code></pre> <ul> <li> <p>Check that your password is recognized by clicking <code>Check Password Settings</code> </p> </li> <li> <p>Click save machine at the top right</p> </li> </ul> <p>Click Start Job at the bottom right</p> <ul> <li>For this tutorial, the default 1 minute interval to ping Puhti for the job status is ok, but for actual production jobs, that could be increased to e.g. 1 hour. The status can always be refreshed manually. This job should finish in seconds.</li> </ul> <p></p>"},{"location":"tutorial1/#task-1-results-structure","title":"Task 1: Results -- structure","text":"<p>The geometry optimization needed 5 cycles to reach the stationary point on the energy surface.</p> <p></p>"},{"location":"tutorial1/#task-1-results-gradients","title":"Task 1: Results -- Gradients","text":"<p>The length of the arrows show how steep the energy surface is in that direction</p> <p></p> <p>At the end of the geometry optimization we have reached a stationary point (gradient smaller than a given threshold) that could correspond to:</p> <p></p> <ul> <li>a minimum A</li> <li>inflection point B</li> <li>a maximum C</li> </ul> <p>The nature of the stationary point can be deduced from the curvature (Hessian). A positive curvature corresponds to a minimum, a negative to a maximum.</p>"},{"location":"tutorial1/#task-1-vibrational-spectrum","title":"Task 1: Vibrational spectrum","text":"<p>In order to verify that the stationary point is a true minimum (positive curvature in all directions = positive frequencies)</p> <p>Start a frequency calculation (Reuse data by just hitting \"Start new job by using current data as input\" )</p> <p></p> <p>In the \"Job typ\" list select \"Spectra &amp; Excited States --&gt; IR &amp; vibrational frequencies\"</p> <p>Select \"Run (Network)\" to launch the job.</p> <p>Once the job finishes (you can refresh the view - wait for results to get downloaded). You can also log in on the supercomputer</p> <pre><code>ssh -Y your-username@puhti.csc.fi\n</code></pre> <p>and follow the job status with slurm commands more on these e.g. in CSC Computing Environment self learning materials directly, e.g. with:</p> <pre><code>squeue -u $USER # my current running or queuing jobs\nsacct           # my ended jobs for the last day\nsacct -X -o jobid,start,jobname,state,elapsed,alloc # last jobs with custom fields\n</code></pre> <p>A local terminal on Puhti also gives access to some additional tools and scripts that come with TURBOMOLE that can be nice to follow or post process the data. You can find these e.g.</p> <pre><code>module load turbomole/7.8\nls $TURBODIR/scripts/\ncgnce -h # to get help on usage\nactual -h \n</code></pre> <p>All calculated frequencies are positive indicating that the structure corresponds to a true minimum.</p> <p></p> <p>The zero Kelvin minimum energy structure in a vacuum is often the starting point in solving chemical problems. It often represents surprisingly well the molecular properties despite all the approximations made. What could you use this information for? How to validate or improve the model?</p> <p>This ends the tutorial.</p>"},{"location":"tutorial2/","title":"Tutorial 2: Find the most stable structure of given isomers","text":"<ul> <li>Spring School on Computational Chemistry 17-19 April 2024</li> <li>Nino Runeberg, CSC - IT center for Science Ltd, based on the earlier work of Atte Sillanp\u00e4\u00e4</li> </ul>"},{"location":"tutorial2/#overview","title":"Overview","text":"<ol> <li>We have downloaded from PubChem a set of molecules having the same molecular formula C<sub>11</sub>H<sub>14</sub>O<sub>2</sub>N<sub>2</sub> . </li> <li>From the original set of about 14700 molecules we have selected 31 structures.    Their corresponding SMILES strings are  given in the table https://siili.rahtiapp.fi/Duf0GbqtRVGrz2dZbPi5qg </li> <li>Pick any of the free structures in that table and mark your name on the row (click on side-by-side icon at top left to edit ) </li> <li>Set up a calculation to get the minimum energy conformation according to the same recipe we used for formaldehyde</li> <li>Tabulate the total energy of the corresponding optimized structure</li> <li>Can you explain why some isomers are lower in energy than others?</li> <li>Bonus Would the order change if you'd change the model? Improve basis set? Add an implicit solvent model? Include entropy estimate?</li> </ol>"},{"location":"tutorial2/#open-tmolex-and-create-a-new-project","title":"Open TmoleX and create a new Project","text":"<ol> <li>Launch TmoleX and create a new project in a suitable directory.  </li> <li>If you use the Puhti desktop then use something like  <code>/scratch/project_2006657/&lt;your-username&gt;/qc_tutorial2</code>. Remember to  replace  <code>your-username</code> with your actual username in order to make it a unique and not interfering with other participants projects.</li> <li>If you use a locally installed TmoleX then define the new project under your home directory, e.g. <code>~/qc_tutorial2</code> .</li> <li>A new job is initiated within your new TmoleX project. </li> <li>Rename the first job in this project according to the <code>cid</code> identifier you picked from the list </li> <li>In the first <code>Geometry</code> subsection paste your SMILES string into the slot <code>SMILES to 3D</code>. Pushing the buttons should launch the TmoleX viewer showing the 3D structure of the molecule corresponding to your SMILES string. </li> <li>Since the conversion from <code>SMILES</code> to <code>xyz</code> is quite rough it's often a good idea to do a preoptimization.  </li> <li>Continue in a similar way as we did with formaldehyde and optimize the structure. Do a SMP parallel calculation and request for 8 cores.  </li> <li>Once the structure optimization has (hopefully) converged, fill in the total energy of that structure into the table.  </li> </ol>"},{"location":"tutorial2/#examine-how-long-it-took-to-run-the-job","title":"Examine how long it took to run the job","text":"<p>When a job has finished, all output files are transferred to your local job and deleted from Puhti's work directory. Amoung the result files yous should have a file called <code>slurm-XXXXXXXXXX.out</code> where <code>XXXXXXXXXX</code>is replaced with a  number that corresponds to the <code>JOBID</code> the job had in Puhti's queuing system. If you would like to have a closer look at the details of that job you should login to Puhti</p> <pre><code>ssh  your-username@puhti.csc.fi\n</code></pre> <p>Once logged into Puhti you can use the command <code>sacct</code> to collect various data related to the job. Give the command (replace JOBID with the actual number)</p> <pre><code>sacct -X -j JOBID -o state,start,alloc,elapsed,cputime\n     State               Start  AllocCPUS    Elapsed    CPUTime \n---------- ------------------- ---------- ---------- ---------- \n COMPLETED 2024-04-15T15:11:06          4   00:10:51   00:43:24 \n</code></pre> <p>Here the <code>Elapsed</code> time is the wall time the job took to finish. </p> <p>Use the optimized structure and define a new job, <code>Start new job with current data</code>, where you change the basis set (<code>Atomic Attributes</code>) to <code>def2-TZVP</code> and define the job as a  <code>Single Point-&gt; Energy (ground state)</code> . Repeat this calculation  using 1,2,4 and 8 cores.  Tabulate the values into a table. You can calculate the \"speedup\" by dividing the 1 core time with N core time. Linear speedup would equal the number of cores used. A speedup above 1.5 when doubling the number of cores is often considered as reasonable.  </p> cores walltime speedup 1 2 4 8"},{"location":"tutorial2/#discussion","title":"Discussion","text":"<ul> <li>Why do the numbers differ?</li> <li>Why do these number matter?</li> <li>Are these numbers accurate?</li> <li>How to get more accurate information?</li> <li>What else affects the performance?</li> </ul>"},{"location":"tutorial2/#tmolex-and-workflows","title":"TmoleX and workflows","text":"<p>Occationally you would like to apply the same model/workflow on a bunch of different structures. An example was the preoptimization followed by an optimization at a higher level that we used for formaldehyde.  Such batch jobs can be easily done with TmoleX.</p> <ol> <li>Create a new project and select <code>Templates -&gt; New/Edit Template</code></li> </ol> <p></p> <ol> <li>Define two job steps corresponding to an AM1 geometry optimization followed by a dft/bp86/sv(p) optimization.</li> </ol> <p></p> <ol> <li> <p>Create a batch <code>New Batch Job</code> and hit <code>Add List of SMILES</code>. In that window add some of the our SMILES strings followed by a name (here the cid number) </p> </li> <li> <p>For the batch of molecules <code>Choose Job Template</code> -&gt; <code>Charge: Use from input</code> -&gt; <code>Apply Job Template</code> </p> </li> <li> <p>Once the template has been selected start the job </p> </li> </ol> <p>This ends the tutorial.</p>"}]}